{"version":3,"sources":["SpaceX-Logo.svg","components/LaunchItem.js","components/MissionKey.js","components/Loading.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","border-success card card-body mb-3","border-danger card card-body mb-3","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","Loading","class","role","LAUNCHES_QUERY","gql","_templateObject","Launches","react","components_MissionKey","react_apollo_esm","query","loading","error","data","components_Loading","console","log","launches","map","components_LaunchItem","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","height","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e49be458.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceX-Logo.6ff54c0f.svg\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\nconst LaunchItem = ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) => {\n  return (\n    <div\n      className={classNames({\n        \"border-success card card-body mb-3\": launch_success,\n        \"border-danger card card-body mb-3\": !launch_success\n      })}\n    >\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launch_success,\n                \"text-danger\": !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from \"react\";\n\nfunction MissionKey() {\n  return (\n    <div className={\"my-3\"}>\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Failure\n      </p>\n    </div>\n  );\n}\n\nexport default MissionKey;\n","import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div\n      class=\"d-flex align-items-center justify-content-center text-success m-5\"\n      role=\"status\"\n    >\n      <div class=\"spinner-grow\" role=\"status\" />\n      <strong>Loading...</strong>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\nimport Loading from \"./Loading\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nclass Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <Loading />;\n            if (error) return console.log(error);\n\n            return (\n              <Fragment>\n                {data.launches.map(launch => (\n                  // Mission name was used as key due to flight numbers being used more than once.\n                  <LaunchItem key={launch.mission_name} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport Loading from \"./Loading\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nclass Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) {\n              return <Loading />;\n            }\n            if (error) return console.log(error);\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Flight Number: {flight_number}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Year: {launch_year}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Successful:{\" \"}\n                    <span\n                      className={classNames({\n                        \"text-success\": launch_success,\n                        \"text-danger\": !launch_success\n                      })}\n                    >\n                      {launch_success ? \"Yes\" : \"No\"}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">\n                    Rocket Name: {rocket_name}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Rocket Type: {rocket_type}\n                  </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport logo from \"./SpaceX-Logo.svg\";\nimport \"./App.css\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img\n              src={logo}\n              alt=\"SpaceX\"\n              style={{\n                width: \"332px\",\n                height: \"41px\",\n                display: \"block\",\n                margin: \"auto\"\n              }}\n            />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}